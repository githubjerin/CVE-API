const router = require('express').Router();

const Metadata = require('../models/cve-metadata');
const CVE = require('../models/cve-model');
const sleep = require('../modules/sleep-module');
const {requestOptions, batchSize, cvelist_url, cvehistory_url} = require('../configurations/config');

router.get('/fill', (req, res) => {
  fetch(`${cvelist_url}?resultsPerPage=1&startIndex=0`, requestOptions)
    .then((response) => response.json())
    .then(async (result) => {
      for(var i = 2000; i <= result.totalResults; i += batchSize){
        await fetch(`${cvelist_url}?resultsPerPage=${batchSize.toString()}&startIndex=${(i - batchSize).toString()}`, requestOptions)
          .then((resp) => resp.json())
          .then(async (res) => {
            var cves = [];
            for(var j = 0; j < batchSize; j++){
              try {
                await CVE.create(res.vulnerabilities[j].cve).then((cve) => cves.push(cve));
              } catch (err) {
                console.log(err, res.vulnerabilities[j], j);
                res.send("Failed at : " + (i / 2000) + j);
              }
            }
            await CVE.bulkSave(cves).then(console.log("Completed : " + cves.length + " Iteration : " + (i / 2000)));
          })
        await sleep(5000);
      }
    })
    .then(() => {
      res.send("Success");
    })
    .catch((error) => console.error(error));
});

router.get('/meta', async (req, res) => {
  var body = {
    cve: {
      total: 0,
      lastUpdated: null
    },
    cvehistory: {
      total: 0,
      lastUpdated: null
    }
  };
  await fetch(`${cvelist_url}?resultsPerPage=1&startIndex=0`, requestOptions)
    .then((response) => response.json())
    .then((result) => {
      body.cve.total = result.totalResults;
      body.cve.lastUpdated = new Date();
    })
  await fetch(`${cvehistory_url}?resultsPerPage=1&startIndex=0`, requestOptions)
      .then((response) => response.json())
      .then((result) => {
        body.cvehistory.total = result.totalResults;
        body.cvehistory.lastUpdated = new Date();
      })
  await Metadata.deleteMany({ info : "Metadata"}).then(async() => {
      await Metadata.create(body).then((meta) => meta.save());
    });

    res.send("Done");
});

router.get("/clean", async (req, res) => {
  await CVE.deleteMany({ vulnStatus : "Rejected" });
  res.send("Clenaed");
});

module.exports = router;